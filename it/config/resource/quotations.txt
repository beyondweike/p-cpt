设计是发现问题、而不是发现解决方案的过程
代码不只要机器能读懂
测试是来表明bug的存在，而不是不存在
简单不先于复杂，而是在复杂之后
程序不会照所想的跑，只会照所写的跑
把软件设计得单纯到 很明显不会有缺陷
把软件设计得复杂到 看不到明显的缺陷
有意见的话你写
杀一个程序员不需要用刀，改三次需求就好
无论需求多晚确定，完工期限永远不变。「期限守恒定理」
客户总是觉得 水和追加需求 是不用钱的
bug过了一晚 可能就变成需求了
PM想受顾客喜欢，则要让程序员讨厌自己
业务是认为空想能够实现的 梦想家
PM是深信任何障碍都能突破的 冒险家
程序员是被梦想家和冒险家抛到漆黑海里的 漂流者
程序是运气与直觉堆砌而成的奇迹
修改需求是对奇迹的亵渎行为
追加修改是相信奇迹还会重现的愚蠢行动
PM需要持久力，程序员需要爆发力
完美的程序 需要完美的时间与金钱
详细设计要在程序代码的批注里做完
批注是程序员唯一的自卫手段，至少要让自己看懂
祈祷上线后不要出问题，然后跑吧
需求书就像航海图，客户则是水流
水流阴晴不定，航海图就变成垃圾
程序员常在没有航海图的海上 凭自己的力量找到大陆
砍成本、改需求、加需求、赶上线，没有人从失败中吸取教训
老手用来提振精神的格言：「比起以前这算是轻松…」
新手用来提起干劲的格言：「把这件工作做完的话…」
新手还不知道工作是没有终点的
程序、PM、经理不是职务，是逃不掉的连环责任
用一分钟想到方法，用一天去写程序
上线后的除错才叫debug
不懂计算机的操作者是发现bug的天才
程序代码不会比写的人还可信
唯一不产生bug的方法，就是不写程序
就算程序里没bug，编译器会有bug
就算编译器没bug，OS会有bug
就算一切都没bug，客户会决定什么是bug
需求与需求书是不同的东西，通常都是
比期限更重要的是灵感与睡眠
比知识与经验重要的是手册与时间
过了三天再看上去就是别人写的代码
无论怎么检查、怎么确认，上线前一晚就是睡不着
没有比上线一款一直找不到任何bug的程序还要再可怕的了
可以用斧子砍倒一棵树，但是用电锯更有效率
努力编程 升职加薪 出任总经理 赢娶白富美 走向人生巅峰
代码会随着时间的推移慢慢腐烂
代码需要周期性的维护，代码里还藏着bug
下面就开始茴香豆的N种写法吧
如果没有小数据，大数据会充满陷阱
小数据为主，大数据为仆，这是数据管理的正道。
Management as a Service，这是管理人员的核心工作
软件和教堂非常相似--建成之后我们就在祈祷
实际上我们没有失去财富，因为财富从未与我们为邻
圣诞老人是不存在的，但他的精神常在
百年前躺着吸鸦片，百年后躺着玩手机